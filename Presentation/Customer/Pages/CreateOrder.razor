@page "/create-order"

@using Customer.Models
@using Customer.Services.Order
@inject IJSRuntime JS


@inject HttpClient Http
@inject AbstractOrderService OrderService;
<link href="css/createOrder.css" rel="stylesheet"/>
<h1>Create order</h1>
<EditForm Model="@_order" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator/>
    <ValidationSummary/>

    <div id="main-container">
        <div id="fields">
            <div id="labels">
                <label for="startingAddress">
                    Starting address:
                </label>
                <label for="startingLat">
                    Starting lat:
                </label>
                <label for="startingLng">
                    Starting lng:
                </label>
                <label for="destinationPoint">
                    Destination address:
                </label>
                <label for="destinationPoint">
                    Destination lat:
                </label>
                <label for="destinationLng">
                    Destination lng:
                </label>
                <label for="typeOfCar">
                    Type of car:
                </label>
                <label for="amountOfSeats">
                    Needed seats:
                </label>

            </div>
            <div id="inputs">
                <InputText id="startingAddress" @bind-Value="_order.LocationPoints.StartingAddress"/>
                <InputNumber min="-90" max="90" id="startingLat" @bind-Value="_order.LocationPoints.StartingLat" disabled="true"/>
                <InputNumber min="-180" max="180" id="startingLng" @bind-Value="_order.LocationPoints.StartingLng" disabled="true"/>
                <InputText id="destinationPoint" @bind-Value="_order.LocationPoints.DestinationAddress"/>
                <InputNumber min="0" max="90" id="destinationLat" @bind-Value="_order.LocationPoints.DestinationLat" disabled="true"/>
                <InputNumber min="-180" max="180" id="destinationLng" @bind-Value="_order.LocationPoints.DestinationLng" disabled="true"/>
                <select id="typeOfCar" @bind="_order.TypeOfCar">
                    <option value="standard">Standard</option>
                    <option value="comfort">Comfort</option>
                    <option value="VIP">VIP</option>
                </select>
                <select id="amountOfSeats" @bind="_order.NeededSeats">
                    <option value="2">2</option>
                    <option value="6">5</option>
                    <option value="8">8</option>
                </select>
            </div>
        </div>
        <div class="map-container">
            <div id="map" class="map-placeholder">
                <!--<img src="assets/images/InApp1Background.png" alt="map placeholder" />-->
            </div>
            <div class="index-layout">
                <div class="index-layout__header">
                    <svg display="block" viewBox="0 0 24 24" width="36" height="36" stroke="black" stroke-width="2.5" fill="none" stroke-linecap="round" stroke-linejoin="round" class="css-i6dzq1">
                        <line x1="3" y1="12" x2="21" y2="12"></line><line x1="3" y1="6" x2="21" y2="6"></line><line x1="3" y1="18" x2="21" y2="18"></line>
                    </svg>
                </div>
                <div class="index-layout__footer">
                    <div class="place-card">
                        <div class="place-card__icon">
                            <svg display="block" width="58" height="58" viewBox="0 0 58 58" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <circle cx="29" cy="29" r="29" fill="black"/>
                                <path d="M29 39C34.5228 39 39 34.5228 39 29C39 23.4772 34.5228 19 29 19C23.4772 19 19 23.4772 19 29C19 34.5228 23.4772 39 29 39Z" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                                <path d="M39 29H35" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                                <path d="M23 29H19" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                                <path d="M29 23V19" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                                <path d="M29 39V35" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                            </svg>
                        </div>
                        <p class="place-card__title">Destination</p>
                        <p class="place-card__description">Add a new address</p>
                    </div>
                    <div class="place-card">
                        <div class="place-card__icon">
                            <svg display="block" width="58" height="58" viewBox="0 0 58 58" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <circle cx="29" cy="29" r="29" fill="#CDCDCD" fill-opacity="0.6"/>
                                <path d="M20 26L29 19L38 26V37C38 37.5304 37.7893 38.0391 37.4142 38.4142C37.0391 38.7893 36.5304 39 36 39H22C21.4696 39 20.9609 38.7893 20.5858 38.4142C20.2107 38.0391 20 37.5304 20 37V26Z" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                                <path d="M26 39V29H32V39" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                            </svg>
                        </div>
                        <p class="place-card__title">Home</p>
                        <p class="place-card__description">55 minutes</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <button type="submit">Submit</button>
    <p id="error-label">@_error</p>
</EditForm>


@code {
    // Get user ID from the clientService
    // First create the clientService
    private readonly Order _order = new Order();
    private string _error = "";

    protected override async void OnInitialized()
    {
        await base.OnInitializedAsync();
        _order.TypeOfCar = "standard";
        _order.NeededSeats = "2";
        await JS.InvokeVoidAsync("window.initMap");
    }

    private async void HandleValidSubmit()
    {
        bool isValid = true;
        _error = "";
        if (_order.LocationPoints.StartingAddress == null)
        {
            _error = "Starting address can't be empty!<br>";
            isValid = false;
        }
        if (_order.LocationPoints.DestinationAddress == null)
        {
            _error += "Destination address can't be empty!";
            isValid = false;
        }
        if (!isValid)
        {
            return;
        }

        var response = await Http.PostAsJsonAsync("api/orders", _order);
        if (!response.IsSuccessStatusCode)
        {
            _error = "Don't try to hack me";
        }
    }



}