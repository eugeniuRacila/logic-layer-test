@using Customer.Services.Order
@inject IAuthenticationService AuthenticationService
@inject OrderService OrderService;

<!-- Styles -->
<link rel="stylesheet" href="css/components/NavMenu.css">

<!-- Content -->
<header class="header @HeaderFixedCssClass @HeaderPaddingCssClass">
    <div class="header__navigation">
        <div class="header__logo">
            <NavLink href="" Match="NavLinkMatch.All">
                <h1 class="header__schwifty">schwifty</h1>
            </NavLink>
        </div>
        <div class="header__actions">
            @if (AuthenticationService.User == null)
            {
                <NavLink href="create-account" class="header__link">Sign up</NavLink>
            }
            else
            {
                <NavLink href="create-order" class="header__link" hidden="!@HasActiveOrders">Create order</NavLink>
                <NavLink href="create-order" class="header__link" hidden="@HasActiveOrders">Active order</NavLink>
            }
            
            <div class="header__nav-toggle">
                <svg width="26" height="12" viewBox="0 0 26 12" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <rect width="26" height="2" fill="black"/>
                    <rect y="10" width="26" height="2" fill="black"/>
                </svg>
            </div>
        </div>
    </div>
    <nav class="nav">

    </nav>
</header>

<!-- Code -->
@code {
    private bool HasActiveOrders   {get;set;} = false;
    
    [Parameter]
    public bool IsFixed { get; set; }
    
    [Parameter]
    public bool HasPadding { get; set; }
    
    private Order activeOrder { get; set; }
    
    private string HeaderFixedCssClass => IsFixed ? "header--fixed" : null;
    
    private string HeaderPaddingCssClass => HasPadding ? "header--padding" : null;

    protected override async Task OnInitializedAsync()
    {
        activeOrder = await OrderService.GetMyActiveOrder();
        HasActiveOrders = activeOrder != null;
        await base.OnInitializedAsync();
    }

}
