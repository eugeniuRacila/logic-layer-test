@page "/create-account/form"
@using Driver.Models
@using System.Text.RegularExpressions

@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IAuthenticationService AuthenticationService
<!-- Styles -->
<link rel="stylesheet" href="css/pages/CreateAccountForm.css">

<!-- Content -->
<div class="create-account-form page-side-padding">
 
        <div class="margin-b-32">
            <NavMenu/>
        </div>
        <div class="create-account-form__text">
            <h3 class="head-line-3 margin-b-16">Get to your destination</h3>
            <p class="paragraph margin-b-32">But first, you need to create an account. Enter the required information below to begin ordering rides!</p>
        </div>
        <div class="form">
            <EditForm Model="@_userRegistration" OnValidSubmit="@HandleValidSubmit">
                <DataAnnotationsValidator/>
                <div class="form-inputs margin-b-32">
                    <div class="input-container margin-b-16">
                        <InputText type="text" class="input-container__input" id="first-name" @bind-Value="_userRegistration.FirstName"></InputText>
                        <label class="input-container__label @(_userRegistration.FirstName.Length > 0 ? "input-container__label--completed" : "")" for="first-name">First name</label>
                        <p style="align-self: center; color: red">@firstNameError</p>
                    </div>
                    <div class="input-container margin-b-16">
                        <InputText type="text" class="input-container__input" id="last-name" @bind-Value="_userRegistration.LastName"></InputText>
                        <label class="input-container__label @(_userRegistration.LastName.Length > 0 ? "input-container__label--completed" : "")" for="last-name">Last name</label>
                        <p style="align-self: center; color: red">@lastNameError</p>
                    </div>
                    <div class="input-container margin-b-16">
                        <InputText type="email" class="input-container__input" id="email-address" @bind-Value="_userRegistration.Email"></InputText>
                        <label class="input-container__label @(_userRegistration.Email.Length > 0 ? "input-container__label--completed" : "")" for="email-address">Email address</label>
                        <p style="align-self: center; color: red">@emailError</p>
                    </div>
                    <div class="input-container margin-b-16">
                        <InputText type="text" class="input-container__input" id="phone-number" @bind-Value="_userRegistration.PhoneNumber"></InputText>
                        <label class="input-container__label @(_userRegistration.PhoneNumber.Length > 0 ? "input-container__label--completed" : "")" for="phone-number">Phone number</label>
                        <p style="align-self: center; color: red">@phoneNumberError</p>
                    </div>
                    <div class="input-container margin-b-16">
                        <InputText type="password" class="input-container__input" id="password" @bind-Value="_userRegistration.Password"></InputText>
                        <label class="input-container__label @(_userRegistration.Password.Length > 0 ? "input-container__label--completed" : "")" for="password">Password</label>
                        <p style="align-self: center; color: red">@passwordError</p>
                    </div>
                    <div class="input-container margin-b-16">
                        <InputText type="password" class="input-container__input" id="confirm-password" @bind-Value="_userRegistration.ConfirmPassword"></InputText>
                        <label class="input-container__label @(_userRegistration.ConfirmPassword.Length > 0 ? "input-container__label--completed" : "")" for="confirm-password">Confirm password</label>
                        <p style="align-self: center; color: red">@confirmPasswordError</p>
                    </div>
                </div>
                <div class="form-submit">
                    <button class="form-submit__button button button--large margin-b-16">Create account</button>
                    <div class="form-agreement__checkbox-container">
                        <input required id="terms-and-policy" type="checkbox" class="form-agreement__checkbox">
                        <label for="terms-and-policy" class="paragraph paragraph--small paragraph--black">By creating an account, you agree to the Terms and Conditions and Privacy Policy</label>
                    </div>
                </div>
            </EditForm>
        </div>
</div>

@code {
    private readonly UserRegistration _userRegistration = new UserRegistration();
    private bool _createdAccountSuccessfully;
    private Regex regexNames = new Regex(@"^[a-zA-Z]{2,16}$", RegexOptions.IgnoreCase);
    private Regex regexEmail = new Regex(@"^[A-z]{2,16}@[a-z]{2,16}\.[a-z]{2,3}$", RegexOptions.IgnoreCase);
    private Regex regexNumber = new Regex(@"^[0-9]{8}$", RegexOptions.IgnoreCase);
    private Regex regexPassword = new Regex(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,20}$");
    private string firstNameError, lastNameError, emailError, phoneNumberError, passwordError, confirmPasswordError ;

    private async void HandleValidSubmit()
    {
        if (!validation())
        {
            return;
        }
        var response = await Http.PostAsJsonAsync("/api/auth/driver/register", _userRegistration);

        if (response.IsSuccessStatusCode)
        {
            await AuthenticationService.Login(_userRegistration.Email, _userRegistration.Password);
            _createdAccountSuccessfully = true;
            NavigationManager.NavigateTo("");
         
            await InvokeAsync(StateHasChanged);
        }
    }

    private bool validation()
    {
        firstNameError = regexNames.IsMatch(_userRegistration.FirstName) ? "" : "The first name must contain from 2 to 16 latin letters";
        lastNameError = regexNames.IsMatch(_userRegistration.LastName) ? "" : "The last name must contain from 2 to 16 latin letters";
        emailError = regexEmail.IsMatch(_userRegistration.Email) ? "" : "The email should correspond to the following format [2-16]@[2-16].[2-3] ";
        phoneNumberError = regexNumber.IsMatch(_userRegistration.PhoneNumber) ? "" : "The phone must be 8 numbers";
        passwordError = regexPassword.IsMatch(_userRegistration.Password) ? "" : "The password must have : 1) Min 8 chars, 2)Max 20 chars, 3) Min one capital letter 4) Min one ?low-case? letter 5) Min one digit 6)Min 1 special symbol";
        confirmPasswordError = _userRegistration.Password.Equals(_userRegistration.ConfirmPassword) ? "" : "Passwords don't correspond"; 
        
        return canBeSubmitted(firstNameError, lastNameError, emailError, phoneNumberError, passwordError, confirmPasswordError);
    }

    private bool canBeSubmitted(params string[] errors)
    {
        foreach (string error in errors)
        {
            if (!error.Equals(""))
                return false;
        }
        return true;
    }

}